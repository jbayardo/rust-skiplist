language: rust
sudo: false
rust:
  - nightly
  - beta
env:
  global:
    - RUST_BACKTRACE=1
    - CODECOV_TOKEN=:uuid-repo-token
# TODO: add envs from https://github.com/japaric/trust/blob/master/.travis.yml
matrix:
  allow_failures:
    - rust: beta

  include:
    # Sanitizers are available only for select architectures. See tracking bug
    # at https://github.com/rust-lang/rust/issues/39699
    # Linux
    - env: TARGET=x86_64-unknown-linux-gnu RUSTFLAGS="-Z sanitizer=address"
      script:
        - cargo run --target x86_64-unknown-linux-gnu
        - cargo test --target x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-gnu RUSTFLAGS="-Z sanitizer=memory"
      script:
        - cargo run --target x86_64-unknown-linux-gnu
        - cargo test --target x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-gnu RUSTFLAGS="-Z sanitizer=leak"
      script:
        - cargo run --target x86_64-unknown-linux-gnu
        - cargo test --target x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-gnu RUSTFLAGS="-Z sanitizer=thread"
      script:
        - cargo run --target x86_64-unknown-linux-gnu
        - cargo test --target x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-gnu

    # OSX
    - env: TARGET=x86_64-apple-darwin RUSTFLAGS="-Z sanitizer=address"
      os: osx
      script:
        - cargo run --target x86_64-apple-darwin
        - cargo test --target x86_64-apple-darwin
    # TODO: Memory sanitizer works only with x86_64-unknown-linux-gnu
    #- env: TARGET=x86_64-apple-darwin RUSTFLAGS="-Z sanitizer=memory"
    #  os: osx
    # TODO: Leak sanitizer works only with x86_64-unknown-linux-gnu
    #- env: TARGET=x86_64-apple-darwin RUSTFLAGS="-Z sanitizer=leak"
    #  os: osx
    - env: TARGET=x86_64-apple-darwin RUSTFLAGS="-Z sanitizer=thread"
      os: osx
      script:
        - cargo run --target x86_64-apple-darwin
        - cargo test --target x86_64-apple-darwin
    - env: TARGET=x86_64-apple-darwin
      os: osx


# All of this is required to run code coverage for out project using CodeCov.
# See https://github.com/codecov/example-rust
addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev

after_success: |
  wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
  tar xzf master.tar.gz &&
  cd kcov-master &&
  mkdir build &&
  cd build &&
  cmake .. &&
  make &&
  make install DESTDIR=../../kcov-build &&
  cd ../.. &&
  rm -rf kcov-master &&
  for file in target/debug/skiplist-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
  bash <(curl -s https://codecov.io/bash) &&
  echo "Uploaded code coverage"